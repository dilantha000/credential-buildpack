#!/usr/bin/env bash
set -eo pipefail

BUILD_DIR=${1}
CACHE_DIR=${2}
DEPS_DIR=${3}
INDEX=${4}

BUILDPACK_DIR=$(dirname $(readlink -f ${BASH_SOURCE%/*}))

echo "BUILDPACK_DIR = ${BUILDPACK_DIR}"
echo "BUILD_DIR     = ${BUILD_DIR}"
echo "CACHE_DIR     = ${CACHE_DIR}"
echo "DEPS_DIR      = ${DEPS_DIR}"
echo "INDEX         = ${INDEX}"

pushd "${CACHE_DIR}"
  curl -L -O https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.10_9.tar.gz
  tar xzf OpenJDK11U-jdk_x64_linux_hotspot_11.0.10_9.tar.gz
  export PATH=$PWD/jdk-11.0.10+9/bin:$PATH
popd

pushd "${CACHE_DIR}"
  curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx
  export PATH=$PWD:$PATH
popd

# pushd: save current dir to stack. Move to new dir.
pushd "${DEPS_DIR}/${INDEX}"

# CF API cannot be targetted from inside a customer buildpack or application environment (AC has a network level block enabled).
# CF create-service-key command is for cf marketplace services, which I am not sure if you are using or not..
# Where will the S3 credentials come from? How will the S3 bucket be managed? Are you planning to create a marketplace service?

# Environment variables for s3 Bucket - enables AWS CLI to add, download and modify files
#SERVICE_INSTANCE_NAME=my-creds-bucket
#KEY_NAME=karinz
#cf create-service-key "${SERVICE_INSTANCE_NAME}" "${KEY_NAME}"
#S3_CREDENTIALS=`cf service-key "${SERVICE_INSTANCE_NAME}" "${KEY_NAME}" | tail -n +2`

#export BUCKET_NAME=`echo "${S3_CREDENTIALS}" | jq -r .bucket`
#export AWS_ACCESS_KEY_ID=`echo "${S3_CREDENTIALS}" | jq -r .access_key_id`
#export AWS_SECRET_ACCESS_KEY=`echo "${S3_CREDENTIALS}" | jq -r .secret_key_id`
#export AWS_DEFAULT_REGION=`echo "${S3_CREDENTIALS}" | jq -r '.region'`

echo "${BUCKET_NAME}"
echo "${AWS_ACCESS_KEY_ID}"
echo "${AWS_SECRET_ACCESS_KEY}"
echo "${AWS_DEFAULT_REGION}"

# Download the keystore from your s3 bucket
KEYSTORE=`aws s3 cp s3://${BUCKET_NAME}/keystore.pfx`

#KEY=privateKey.key
#CERT=myCert.crt
#KEYSTORE=myKeystore.pfx
#echo Generate Key and Certificate
#openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $KEY -out $CERT -subj '//CN=myorg.co.nz'
#echo Generating Keystore
#openssl pkcs12 -export -out $KEYSTORE -inkey $KEY -in $CERT -passout pass: -name "$KEYSTORE"
#ls
#echo Printing Keystore
#openssl pkcs12 -info -in $KEYSTORE -noout -passin pass:
popd

# Create a .profile folder within the build directory
mkdir -p "${BUILD_DIR}/.profile.d"
# Create a param to reference build .profile + script
# custom_credentials.sh will be run when the app starts. Can be named whatever you want.
CUSTOM_KEYSTORE_PATH="${BUILD_DIR}/.profile.d/custom_credentials.sh"
# Make CUSTOM_KEYSTORE available as env variable when the script is run.
echo "export CUSTOM_KEYSTORE=/deps/${INDEX}/${KEYSTORE}" > "${CUSTOM_KEYSTORE_PATH}"